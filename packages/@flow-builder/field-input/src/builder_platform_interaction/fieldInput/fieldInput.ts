import { scheduleTask } from 'builder_platform_interaction/alcComponentsUtils';
import { menuContextItemAll } from 'builder_platform_interaction/fieldInputUtils';
import { lwcUtils } from 'builder_platform_interaction/sharedUtils';
import { api, LightningElement, track } from 'lwc';
import { LABELS } from './fieldInputLabels';

const selectors = {
    inputBox: 'builder_platform_interaction-field-input-box',
    menu: 'builder_platform_interaction-field-input-menu'
} as const;

const defaultConfig: FieldInput.MenuConfig = {
    sortField: 'label',
    activePicklistValues: [],
    traversalConfig: { isEnabled: true },
    filter: {
        includeNewResource: true,
        allowGlobalConstants: true,
        showSystemVariables: true,
        showGlobalVariables: true,
        shouldBeWritable: false
    }
} as const;

export default class FieldInput extends LightningElement {
    static delegatesFocus = true;

    labels = LABELS;
    dom = lwcUtils.createDomProxy(this, selectors);

    /* the menu context items generated by the breadcrumb component */
    @track contextItems: FieldInput.MenuContextItem[] = [menuContextItemAll];

    /* The currently selected item, as shown in a pill */
    @api value: FieldInput.MenuItem | undefined;

    /* Whether the menu is opened */
    @track isMenuOpened = false;

    /* the field input context */
    @api context!: FieldInput.Context;

    /* allow params rules */
    @api rules?: RuleMap;

    /* menu config */
    @api config: FieldInput.MenuConfig = defaultConfig;

    /* whether a hide menu action has been scheduled and is pending */
    hasPendingHideMenu = false;

    /**
     * Handles the fieldinputmenuselectitem event dispatched from the menu
     *
     * @param event - The menu item selection event
     */
    handleFieldInputMenuSelectItem(event: FieldInput.MenuSelectItemEvent) {
        const menuItem = event.detail.item;

        if (menuItem.view != null) {
            this.updateContextItems([
                ...this.contextItems,
                { ...menuItem.view, label: menuItem.label, name: menuItem.name }
            ]);
        } else {
            this.shouldShowMenu(false);
        }
    }

    /**
     * Handles the breakcrumbclick event dispatched from the input box
     *
     * @param event - The breakcrumb click event
     */
    handleFieldInputBreadcrumbClick(event: FieldInput.BreadcrumbClickEvent) {
        const { index } = event.detail;

        // remove trailing breadcrumbs from index
        this.updateContextItems(this.contextItems.slice(0, index + 2));
    }

    /**
     * Updates the context items
     *
     * @param contextItems - The next context items
     */
    updateContextItems(contextItems: FieldInput.MenuContextItem[]) {
        this.contextItems = contextItems;

        // after updating the context items we need to restore the focus to the menu
        scheduleTask(() => {
            this.resetPendingHideMenu();
            this.dom.menu.focus();
        });
    }

    /**
     * Show or hides the menu
     *
     * @param showMenu - Whether to show the menu
     */
    shouldShowMenu(showMenu: boolean) {
        this.isMenuOpened = showMenu;

        if (!showMenu) {
            // when hidding the menu, reset the context to all
            this.contextItems = [menuContextItemAll];
        } else {
            // otherwise dismiss any pending hide menu
            this.resetPendingHideMenu();
        }
    }

    /**
     * Handles the show menu event
     *
     * @param event - The show menu event
     */
    handleShowMenu(event: FieldInput.ShowMenuEvent) {
        this.shouldShowMenu(event.detail.show);
    }

    /**
     * Handles the focusin event
     */
    handleFocusIn() {
        this.shouldShowMenu(true);
    }

    /**
     * Cancels any pending hide menu action
     */
    resetPendingHideMenu() {
        this.hasPendingHideMenu = false;
    }

    /**
     * Handles the components' focus out event, and hides the menu
     * if the focus is moving to somewhere outside the component
     *
     * @param event - The focus event
     */
    handleFocusOut(event: FocusEvent) {
        // @ts-ignore
        const tagName = event.relatedTarget?.tagName;

        // if the focus is moved to another part of the field-input, ignore the focusout
        if (
            tagName === 'BUILDER_PLATFORM_INTERACTION-FIELD-INPUT-MENU' ||
            tagName === 'BUILDER_PLATFORM_INTERACTION-FIELD-INPUT-BOX'
        ) {
            return;
        }

        // otherwise schedule a hide menu action
        this.hasPendingHideMenu = true;

        scheduleTask(() => {
            if (this.hasPendingHideMenu) {
                this.shouldShowMenu(false);
            }
        });
    }
}
